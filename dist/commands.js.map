{"version":3,"file":"commands.js","mappings":";YACA,IAAIA,EAAsB,CAAC,kQCA3B,woNA6BA,WAAgCC,GAAhC,iFACQC,MAAMC,IAAN,6BAAU,WAAOC,GAAP,8EAERC,EAAQD,EAAQE,SAASC,WAAWC,sBAIpCC,KAAK,wBANG,SAORL,EAAQM,OAPA,cASVL,EAAMM,WAAWC,UACnBP,EAAMM,WAAWE,YAEjBR,EAAMM,WAAWG,UAZL,SAcRV,EAAQM,OAdA,2CAAV,uDAeHK,OAAM,SAAUC,GACjBC,QAAQC,IAAI,UAAYF,GACpBA,aAAiBG,gBAAgBC,OACnCH,QAAQC,IAAI,eAAiBG,KAAKC,UAAUN,EAAMO,WAErD,IArBH,OAsBEtB,EAAKuB,YAtBP,mEC9BAxB,EAAoByB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAGhB,CAFE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,GDOxBC,OAAOC,SAAQ,WAEd,KA+CwB,oBAATC,KACVA,KACkB,oBAAXH,OACPA,YACkB,IAAXI,EAAAA,EACPA,EAAAA,OACAC,GAMJC,OArDF,SAAgBC,GACd,IAAMC,EAAU,CACdC,KAAMR,OAAOS,aAAaC,4BAA4BC,qBACtDJ,QAAS,oBACTK,KAAM,aACNC,YAAY,GAIdb,OAAO3B,QAAQyC,QAAQC,KAAKC,qBAAqBC,aAAa,SAAUV,GAGxED,EAAMb,WACP,EA0CDO,OAAOkB,QAAQC,UAAU,6BAxCO","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/./src/commands/commands.js","webpack://office-addin-taskpane-js/webpack/runtime/global"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global global, Office, self, window */\r\n\r\nOffice.onReady(() => {\r\n  // If needed, Office.js is ready to be called\r\n});\r\n\r\n/**\r\n * Shows a notification when the add-in command is executed.\r\n * @param event {Office.AddinCommands.Event}\r\n */\r\nfunction action(event) {\r\n  const message = {\r\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n    message: \"Performed action.\",\r\n    icon: \"Icon.80x80\",\r\n    persistent: true,\r\n  };\r\n\r\n  // Show a notification message\r\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\r\n\r\n  // Be sure to indicate when the add-in command function is complete\r\n  event.completed();\r\n}\r\n\r\nasync function toggleProtection(args) {\r\n  await Excel.run(async (context) => {\r\n    // TODO1: Queue commands to reverse the protection status of the current worksheet.\r\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\r\n\r\n    // TODO2: Queue command to load the sheet's \"protection.protected\" property from\r\n    //        the document and re-synchronize the document and task pane.\r\n    sheet.load(\"protection/protected\");\r\n    await context.sync();\r\n\r\n    if (sheet.protection.protected) {\r\n      sheet.protection.unprotect();\r\n    } else {\r\n      sheet.protection.protect();\r\n    }\r\n    await context.sync();\r\n  }).catch(function (error) {\r\n    console.log(\"Error: \" + error);\r\n    if (error instanceof OfficeExtension.Error) {\r\n      console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\r\n    }\r\n  });\r\n  args.completed();\r\n}\r\n\r\nfunction getGlobal() {\r\n  return typeof self !== \"undefined\"\r\n    ? self\r\n    : typeof window !== \"undefined\"\r\n    ? window\r\n    : typeof global !== \"undefined\"\r\n    ? global\r\n    : undefined;\r\n}\r\n\r\nconst g = getGlobal();\r\n\r\n// The add-in command functions need to be available in global scope\r\ng.action = action;\r\n\r\nOffice.actions.associate(\"toggleProtection\", toggleProtection);\r\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();"],"names":["__webpack_require__","args","Excel","run","context","sheet","workbook","worksheets","getActiveWorksheet","load","sync","protection","protected","unprotect","protect","catch","error","console","log","OfficeExtension","Error","JSON","stringify","debugInfo","completed","g","globalThis","this","Function","e","window","Office","onReady","self","global","undefined","action","event","message","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","mailbox","item","notificationMessages","replaceAsync","actions","associate"],"sourceRoot":""}